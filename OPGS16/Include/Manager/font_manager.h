#ifndef OPGS16_SYSTEM_FONT_MANAGER_H
#define OPGS16_SYSTEM_FONT_MANAGER_H

///
/// @license BSD 2-Clause License
///
/// Copyright (c) 2018, Jongmin Yun(Neu.), All rights reserved.
/// If you want to read full statements, read LICENSE file.
///
/// @file Manager/font_manager.h
///
/// @brief
/// Fundamental font renderer to render string, and manages font glyphs.
/// This file consists of application operation class and member API functions.
///
/// @author Jongmin Yun
/// @log
/// 2018-02-06 Create file.
/// 2018-03-03 Refactoring.
/// 2018-05-26 Remove singleton and replace it with namespace at first.
///

#include <string>
#include <memory>
#include <unordered_map>
#include <optional>

/// ::opgs16::manager::_internal::DCharacter
#include <Manager/Internal/font_internal.h>

///
/// @namespace opgs16::manager::font
/// @brief The class manages reading fonts, rendering fonts.
///
/// This class manages reading fonts, rendering fonts.
/// default shader is initiated as creating font instance.
///
/// @author Jongmin Yun
/// @log
/// 2018-03-03 Refactoring. Move it to opgs16::manager.
/// 2018-05-28 Refactoring. Detach rendering part to component::CFont2DRenderer.
///
namespace opgs16::manager::font {

///
/// Internal type aliasing
///

using TFontType	    = std::unordered_map<char16_t, _internal::DCharacter>;
using TFontMapPtr  = std::unique_ptr<TFontType>;
using TFontMap = std::unordered_map<std::string, TFontMapPtr>;

///
/// @brief Generate font glyphs with name_tag from ResourceManager.
/// @param[in] font_name Name tag to refer to stored font glyphs later,
/// and get information from ResourceManager.
///
/// @return The success flag.
///
bool GenerateFont(const std::string& font_name);

///
/// @brief Generate utf16 character font glyph when font_name is already
/// generated by calling GenerateFont.
///
/// @param[in] font_name
/// @param[in] utf16_char
///
bool GenerateCharacter(const std::string& font_name, const char16_t utf16_char);

///
/// @brief Loads default font. If default is not specified, return false flag.
/// @return The success flag.
///
TFontType* GetDefaultFont();

///
/// @brief
///
///
/// @param[in] font_name_tag
///
/// @return
///
std::optional<TFontType*> GetFontSetPtr(const std::string& font_name_tag);

///
/// @brief
/// Delete font that is specified by tag name. if not found, return false flag.
///
/// @param[in] font_name The tag destroy stored font glyphs.
///
/// @reutrn The success flag.
///
bool DeleteFont(const std::string& font_name);

///
/// @brief Check font exists.
///
/// @param[in] font_name Font name to find in font container.
///
/// @return The success flag. If font is exist, return true.
///
bool IsFontExist(const std::string& font_name);

///
/// @brief Get default font size.
///
unsigned GetDefaultFontSize();

} /// ::opgs16::manager::font

// Internal namespace
namespace opgs16::manager::font::__ {

///
/// @brief
/// Initialize Font renderer instance with font path.
///
void Initiate();

///
/// @brief
/// Shutdown and release all binding resources.
///
void Shutdown();

}

#endif /// OPGS16_SYSTEM_FONT_MANAGER_H
